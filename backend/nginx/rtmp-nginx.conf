user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
        # 서버 사양에 따라 조절, 한번에 수용할 수 있는 요청 수를 나타낸다.
        worker_connections 1024;

        # nginx가 수신 큐에 들어와 있는 연결을 다 받을지 여를 결정
        # multi_accept on; 
}

http {
        # Basic Settings
        # sendfile 커널을 통해 파일 전송, off시 nginx 스스로 파일 전송
        sendfile on;
        # tcp_nodelay 소켓 옵션 활성화
        tcp_nodelay on;
        # tcp_nopush 소켓 옵션 활성화, http 응답 해더를 단일 tcp 패킷에 전송하려 시도
        tcp_nopush on;

        keepalive_timeout 65;
        types_hash_max_size 2048;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        server {
            listen       8080;
            server_name  localhost;

            # rtmp stat
            location /stat {
                rtmp_stat all;
                rtmp_stat_stylesheet rtmp-stat.xsl;
            }
            
            # rtmp stat 통계 시각화 파일
            location /rtmp-stat.xsl {
                root /etc/nginx;
            }

            # error_page 설정
            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
            
        }

        # Logging Settings
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        # Gzip Settings
        gzip on;

        # Virtual Host Configs
        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;

}

# 영상을 미디어 서버로 보낼때 사용하는 프로토콜
# nginx rtmp 설정
rtmp {
        server {
                
                # rtmp 포트 번호
                listen 1935;
                # 어디에서 오던 받아주도록 설정
                listen [::]:1935 ipv6only=on; 

                # rtmp 가 4k 블록으로 데이터 전송
                chunk_size 4096;

                application publish {
                        live on;

                        # 방송 시작전 인증 to Manager 서버 (POST)
                        on_publish http://${MANAGER_SERVER:PORT}/api/v1/manager/live;

                        # 방송 시작 알림 to 내부 Media 서버 (POST)
                        on_play http://localhost:${MEDIA_SERVER_PORT}/live;

                        # 방송 종료 알림 to 내부 Media 서버 (POST)
                        on_play http://localhost:${MEDIA_SERVER_PORT}/end;

                        # 방송 종료시 to Manager 서버 (POST)
                        on_done p://${MANAGER_SERVER:PORT}/api/v1/manager/end;

                        # obs keyframe 조정도 필요
                        exec ffmpeg -i rtmp://localhost/publish/$name
                        -c:a aac -b:a 32k  -c:v libx264 -b:v 128K -force_key_frames source -x264-params keyint=20:scenecut=0 -f flv rtmp://localhost/live/$name_low
                        -c:a aac -b:a 64k  -c:v libx264 -b:v 256k -force_key_frames source -x264-params keyint=20:scenecut=0 -f flv rtmp://localhost/live/$name_mid
                        -c:a aac -b:a 128k -c:v libx264 -b:v 512K -force_key_frames source -x264-params keyint=20:scenecut=0 -f flv rtmp://localhost/live/$name_hi;

                }

                #  HLS 형식으로 변환
                application live {
                        live on;

                        #HLS
                        hls on;
                        hls_type live;
                        # 방송마다 폴더 생성
                        hls_nested on;
                        # .ts .m3u8 파일 위치
                        hls_path /video/live/hls;

                        # hls_fragment 
                        hls_fragment 3s;

                        # hls_playlist_length
                        hls_playlist_length 10s;

                        # fragments를 kept
                        hls_continuous on;
                        
                        # fragment 이름 설정
                        hls_fragment_naming sequential;

                        hls_variant _hi  BANDWIDTH=640000;
                        hls_variant _mid BANDWIDTH=320000;
                        hls_variant _low BANDWIDTH=160000;
                 }
        }
} 